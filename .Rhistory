library(textshape)
library(VIF)
library(bipartite)
library(sjstats)
library(Hmisc)
library(network)
library(nlme)
library(ergm.count)
# read interaction data
int.data <- read.table("Data/rocina_halimium_09072019.csv", sep=";", header=T)
View(int.data)
# read interaction data
int.data <- read.table("Data/rocina_halimium_09072019.csv", sep=";", header=T)
View(int.data)
str(int.data)
int.data$N_visits <- as.numeric(int.data$N_visits)
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg) # data on pollinator functional groups, I will use it when incorporating pollinator traits into the network object
View(pol.fg)
# read interaction data
int.data <- read.table("Data/rocina_halimium_09072019.csv", sep=";", header=T)
str(int.data)
int.data$N_visits <- as.numeric(int.data$N_visits)
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg) # data on pollinator functional groups, I will use it when incorporating pollinator traits into the network object
int.matrix <- dcast(dplyr::select(Plant_ID, Pollinator_sp, N_visits),
Plant_ID ~ Pollinator_sp, value.var="N_visits", fun.aggregate = sum)
int.matrix <- dcast(int.data %>%dplyr::select(Plant_ID, Pollinator_sp, N_visits),
Plant_ID ~ Pollinator_sp, value.var="N_visits", fun.aggregate = sum)
View(int.matrix)
int.data %>%dplyr::select(Plant_ID, Pollinator_sp, N_visits)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: initialize
library(sand)
library(robustbase)
library(ergm) # Will load package 'network' as well.
library(igraph)
library(ggplot2)
library(dplyr)
library(maditr)
library(textshape)
library(VIF)
library(bipartite)
library(sjstats)
library(Hmisc)
library(network)
library(nlme)
library(ergm.count)
# Chunk 3: collinearity
# read interaction data
int.data <- read.table("Data/rocina_halimium_09072019.csv", sep=";", header=T)
str(int.data)
int.data$N_visits <- as.numeric(int.data$N_visits)
# create interaction matrix (individual plants x pollinator species)
int.matrix <- dcast(int.data %>%dplyr::select(Plant_ID, Pollinator_sp, N_visits),
Plant_ID ~ Pollinator_sp, value.var="N_visits", fun.aggregate = sum)
# read plant attributes and merge with the interaction matrix
trait.data <- read.table("Data/individual_data_halimium_20190714.csv", sep=";", header=T)
complete.df <- merge(int.matrix, trait.data, by="Plant_ID")
# Chunk 4: bi.nodes
# Subset interaction data
pol.int <- complete.df %>%
dplyr::select(2:22)
bi.g <- graph_from_incidence_matrix(pol.int, weighted= T, add.names=NULL) # create the igraph object
# Subset the covariates from the main dataset (phenotypic and microsite variation among plant individuals)
attr <- complete.df %>%
dplyr::select(c(1, 25:51))
# Scale the predictor variables I will use in the models
attr$Max_height_m <- scale(attr$Max_height_m)
attr$Flower_guide <- scale(attr$Flower_guide)
attr$Flower_size <- scale(attr$Flower_size)
attr$Sum_flower_number <- scale(attr$Sum_flower_number)
attr$Synchrony_marquis <- scale(attr$Synchrony_marquis)
attr$Distance_to_stream <- scale(attr$Distance_to_stream)
attr$Distance_to_tree <- scale(attr$Distance_to_tree)
attr$Distance_to_edge <- scale(attr$Distance_to_edge)
attr$Neighbour_intra_1m_m2 <- scale(attr$Neighbour_intra_1m_m2)
attr$Neighbour_inter_1m_m2 <- scale(attr$Neighbour_inter_1m_m2)
attr$Neighbour_intra_2m_m2 <- scale(attr$Neighbour_intra_2m_m2)
attr$Neighbour_inter_2m_m2 <- scale(attr$Neighbour_inter_2m_m2)
# Associate plant attributes to plant nodes in the igraph object
V(bi.g)$Plant_ID <- c(attr$Plant_ID[1:60], rep(NA, 21))
V(bi.g)$Max_height_m <- c(attr$Max_height_m[1:60], rep(NA, 21))
V(bi.g)$Flower_guide <- c(attr$Flower_guide[1:60], rep(NA, 21))
V(bi.g)$Flower_size <- c(attr$Flower_size[1:60], rep(NA, 21))
V(bi.g)$Sum_flower_number <- c(attr$Sum_flower_number[1:60], rep(NA, 21))
V(bi.g)$Synchrony_marquis <- c(attr$Synchrony_marquis[1:60], rep(NA, 21))
V(bi.g)$Distance_to_stream <- c(attr$Distance_to_stream[1:60], rep(NA, 21))
V(bi.g)$Distance_to_tree <- c(attr$Distance_to_tree[1:60], rep(NA, 21))
V(bi.g)$Distance_to_edge <- c(attr$Distance_to_edge[1:60], rep(NA, 21))
V(bi.g)$Neighbour_intra_1m_m2 <- c(attr$Neighbour_intra_1m_m2[1:60], rep(NA, 21))
V(bi.g)$Neighbour_inter_1m_m2 <- c(attr$Neighbour_inter_1m_m2[1:60], rep(NA, 21))
V(bi.g)$Neighbour_intra_2m_m2 <- c(attr$Neighbour_intra_2m_m2[1:60], rep(NA, 21))
V(bi.g)$Neighbour_inter_2m_m2 <- c(attr$Neighbour_inter_2m_m2[1:60], rep(NA, 21))
## List of pollinator species appearing in the interaction matrix
pol.sp <- as.data.frame(colnames(int.matrix[, 2:22]))
pol.sp
colnames(pol.sp)[1] <- "Pollinator_sp"
## Merge this list with data on pollinator functional groups, the same list has now a second column specifying the functional group of each species
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg)
pol.fg
unique(pol.fg)
## Merge this list with data on pollinator functional groups, the same list has now a second column specifying the functional group of each species
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg)
pol.sp.fg <- merge(pol.sp, pol.fg, by = "Pollinator_sp", all.y = F, all.x = T)
pol.sp.fg
pol.sp.fg <- unique(pol.sp.fg)
pol.sp.fg
## Merge this list with data on pollinator functional groups, the same list has now a second column specifying the functional group of each species
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg)
pol.fg <- unique(pol.fg)
pol.sp.fg <- merge(pol.sp, pol.fg, by = "Pollinator_sp", all.y = F, all.x = T)
pol.sp.fg
pol.fg
## Merge this list with data on pollinator functional groups, the same list has now a second column specifying the functional group of each species
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg)
pol.fg <- unique(pol.fg)
join(pol.sp, pol.fg)
library(plyr)
join(pol.sp, pol.fg)
# read interaction data
int.data <- read.table("Data/rocina_halimium_09072019.csv", sep=";", header=T)
str(int.data)
int.data$N_visits <- as.numeric(int.data$N_visits)
# create interaction matrix (individual plants x pollinator species)
int.matrix <- dcast(int.data %>%dplyr::select(Plant_ID, Pollinator_sp, N_visits),
Plant_ID ~ Pollinator_sp, value.var="N_visits", fun.aggregate = sum)
# read plant attributes and merge with the interaction matrix
trait.data <- read.table("Data/individual_data_halimium_20190714.csv", sep=";", header=T)
complete.df <- merge(int.matrix, trait.data, by="Plant_ID")
View(complete.df)
# Subset interaction data
pol.int <- complete.df %>%
dplyr::select(2:22)
View(pol.int)
bi.g <- graph_from_incidence_matrix(pol.int, weighted= T, add.names=NULL) # create the igraph object
bi.g
# Subset the covariates from the main dataset (phenotypic and microsite variation among plant individuals)
attr <- complete.df %>%
dplyr::select(c(1, 25:51))
# Scale the predictor variables I will use in the models
attr$Max_height_m <- scale(attr$Max_height_m)
attr$Flower_guide <- scale(attr$Flower_guide)
attr$Flower_size <- scale(attr$Flower_size)
attr$Sum_flower_number <- scale(attr$Sum_flower_number)
attr$Synchrony_marquis <- scale(attr$Synchrony_marquis)
attr$Distance_to_stream <- scale(attr$Distance_to_stream)
attr$Distance_to_tree <- scale(attr$Distance_to_tree)
attr$Distance_to_edge <- scale(attr$Distance_to_edge)
attr$Neighbour_intra_1m_m2 <- scale(attr$Neighbour_intra_1m_m2)
attr$Neighbour_inter_1m_m2 <- scale(attr$Neighbour_inter_1m_m2)
attr$Neighbour_intra_2m_m2 <- scale(attr$Neighbour_intra_2m_m2)
attr$Neighbour_inter_2m_m2 <- scale(attr$Neighbour_inter_2m_m2)
# Associate plant attributes to plant nodes in the igraph object
V(bi.g)$Plant_ID <- c(attr$Plant_ID[1:60], rep(NA, 21))
V(bi.g)$Max_height_m <- c(attr$Max_height_m[1:60], rep(NA, 21))
V(bi.g)$Flower_guide <- c(attr$Flower_guide[1:60], rep(NA, 21))
V(bi.g)$Flower_size <- c(attr$Flower_size[1:60], rep(NA, 21))
V(bi.g)$Sum_flower_number <- c(attr$Sum_flower_number[1:60], rep(NA, 21))
V(bi.g)$Synchrony_marquis <- c(attr$Synchrony_marquis[1:60], rep(NA, 21))
V(bi.g)$Distance_to_stream <- c(attr$Distance_to_stream[1:60], rep(NA, 21))
V(bi.g)$Distance_to_tree <- c(attr$Distance_to_tree[1:60], rep(NA, 21))
V(bi.g)$Distance_to_edge <- c(attr$Distance_to_edge[1:60], rep(NA, 21))
V(bi.g)$Neighbour_intra_1m_m2 <- c(attr$Neighbour_intra_1m_m2[1:60], rep(NA, 21))
V(bi.g)$Neighbour_inter_1m_m2 <- c(attr$Neighbour_inter_1m_m2[1:60], rep(NA, 21))
V(bi.g)$Neighbour_intra_2m_m2 <- c(attr$Neighbour_intra_2m_m2[1:60], rep(NA, 21))
V(bi.g)$Neighbour_inter_2m_m2 <- c(attr$Neighbour_inter_2m_m2[1:60], rep(NA, 21))
V(bi.g)$Plant_ID
AA <- get.adjacency(bi.g, attr = "weight")  # create an adjacency matrix from a igraph object
v.attrs <- get.data.frame(bi.g, what="vertices")[1:60,]  # create a dataframe with the attribute variables
AA
as.matrix(AA)
bi.net <- network::as.network(as.matrix(AA),
directed=FALSE, bipartite=60, ignore.eval=FALSE, names.eval='weight')
as.matrix(bi.net, attrname="weight") # check the link weights are correct
network::set.vertex.attribute(bi.net, "Plant_ID",
v.attrs$Plant_ID)
network::set.vertex.attribute(bi.net, "Max_height_m",
v.attrs$Max_height_m)
network::set.vertex.attribute(bi.net, "Flower_guide",
v.attrs$Flower_guide)
network::set.vertex.attribute(bi.net, "Flower_size",
v.attrs$Flower_size)
network::set.vertex.attribute(bi.net, "Sum_flower_number",
v.attrs$Sum_flower_number)
network::set.vertex.attribute(bi.net, "Synchrony_marquis",
v.attrs$Synchrony_marquis)
network::set.vertex.attribute(bi.net, "Distance_to_stream",
v.attrs$Distance_to_stream)
network::set.vertex.attribute(bi.net, "Distance_to_tree",
v.attrs$Distance_to_tree)
network::set.vertex.attribute(bi.net, "Distance_to_edge",
v.attrs$Distance_to_edge)
network::set.vertex.attribute(bi.net, "Neighbour_intra_1m_m2",
v.attrs$Neighbour_intra_1m_m2)
network::set.vertex.attribute(bi.net, "Neighbour_inter_1m_m2",
v.attrs$Neighbour_inter_1m_m2)
network::set.vertex.attribute(bi.net, "Neighbour_intra_2m_m2",
v.attrs$Neighbour_intra_2m_m2)
network::set.vertex.attribute(bi.net, "Neighbour_inter_2m_m2",
v.attrs$Neighbour_inter_2m_m2)
bi.net
list.vertex.attributes(bi.net)
summary.network(bi.net)
get.vertex.attribute(bi.net)
## Check
get.vertex.attribute(bi.net, "Pollinator_fg")
## List of pollinator species appearing in the interaction matrix
pol.sp <- as.data.frame(colnames(int.matrix[, 2:22]))
colnames(pol.sp)[1] <- "Pollinator_sp"
## Merge this list with data on pollinator functional groups, the same list has now a second column specifying the functional group of each species
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg)
pol.fg <- unique(pol.fg)
pol.sp.fg <- join(pol.sp, pol.fg)
## Associate each pollinator species in the nodes of the network object with its functional group
network::set.vertex.attribute(bi.net, "Pollinator_fg",
c(rep(NA, 60), as.vector(pol.sp.fg$Pollinator_fg)))
## Check
get.vertex.attribute(bi.net, "Pollinator_fg")
## Check
get.vertex.attribute(bi.net, "Pollinator_fg")
## Check
bi.net %v% "Pollinator_fg"
bi.net %v% "Plant_ID"
network::set.vertex.attribute(bi.net, "Plant_ID",
c(v.attrs$Plant_ID, rep(NA, 21)))
bi.net %v% "Plant_ID"
network::set.vertex.attribute(bi.net, "Plant_ID",
c(v.attrs$Plant_ID, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Max_height_m",
c(v.attrs$Max_height_m, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Flower_guide",
c(v.attrs$Flower_guide, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Flower_size",
c(v.attrs$Flower_size, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Sum_flower_number",
c(v.attrs$Sum_flower_number, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Synchrony_marquis",
c(v.attrs$Synchrony_marquis, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Distance_to_stream",
c(v.attrs$Distance_to_stream, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Distance_to_tree",
c(v.attrs$Distance_to_tree, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Distance_to_edge",
c(v.attrs$Distance_to_edge, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Neighbour_intra_1m_m2",
c(v.attrs$Neighbour_intra_1m_m2, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Neighbour_inter_1m_m2",
c(v.attrs$Neighbour_inter_1m_m2, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Neighbour_intra_2m_m2",
c(v.attrs$Neighbour_intra_2m_m2, rep(NA, 21)))
network::set.vertex.attribute(bi.net, "Neighbour_inter_2m_m2",
c(v.attrs$Neighbour_inter_2m_m2, rep(NA, 21)))
## List of pollinator species appearing in the interaction matrix
pol.sp <- as.data.frame(colnames(int.matrix[, 2:22]))
colnames(pol.sp)[1] <- "Pollinator_sp"
## Merge this list with data on pollinator functional groups, the same list has now a second column specifying the functional group of each species
pol.fg <- int.data %>% dplyr::select(Pollinator_sp, Pollinator_fg)
pol.fg <- unique(pol.fg)
pol.sp.fg <- join(pol.sp, pol.fg)
## Associate each pollinator species in the nodes of the network object with its functional group
network::set.vertex.attribute(bi.net, "Pollinator_fg",
c(rep(NA, 60), as.vector(pol.sp.fg$Pollinator_fg)))
## Check
bi.net %v% "Pollinator_fg"
ergm0 <- formula(bi.net ~ sum)
ergm1 <- formula(bi.net ~ sum
+ b1cov("Max_height_m", form= "sum")
+ b1cov("Flower_guide", form= "sum")
+ b1cov("Sum_flower_number", form= "sum")
+ b1cov("Synchrony_marquis", form= "sum")
+ b1cov("Distance_to_stream", form= "sum")
+ b1cov("Distance_to_tree", form= "sum")
+ b1cov("Distance_to_edge", form= "sum")
+ b1cov("Neighbour_intra_1m_m2", form= "sum")
+ b1cov("Neighbour_inter_1m_m2", form= "sum")
+ b1cov("Neighbour_intra_2m_m2", form= "sum")
+ b1cov("Neighbour_inter_2m_m2", form= "sum")
+ b2factor("Pollinator_fg", form="sum"))
ergm2 <- formula(bi.net ~ sum
+ b1cov("Max_height_m", form= "sum")
+ b1cov("Flower_guide", form= "sum")
+ b1cov("Flower_size", form= "sum")
+ b1cov("Sum_flower_number", form= "sum")
+ b1cov("Synchrony_marquis", form= "sum")
#+ b1cov("Distance_to_stream", form= "sum")
#+ b1cov("Distance_to_tree", form= "sum")
#+ b1cov("Distance_to_edge", form= "sum")
#+ b1cov("Neighbour_intra_1m_m2", form= "sum")
#+ b1cov("Neighbour_inter_1m_m2", form= "sum")
#+ b1cov("Neighbour_intra_2m_m2", form= "sum")
#+ b1cov("Neighbour_inter_2m_m2", form= "sum")
+ b2factor("Pollinator_fg", form="sum"))
ergm3 <- formula(bi.net ~ sum
#+ b1cov("Max_height_m", form= "sum")
#+ b1cov("Flower_guide", form= "sum")
#+ b1cov("Flower_size", form= "sum")
#+ b1cov("Sum_flower_number", form= "sum")
#+ b1cov("Synchrony_marquis", form= "sum"))
+ b1cov("Distance_to_stream", form= "sum")
+ b1cov("Distance_to_tree", form= "sum")
+ b1cov("Distance_to_edge", form= "sum")
#+ b1cov("Neighbour_intra_1m_m2", form= "sum")
#+ b1cov("Neighbour_inter_1m_m2", form= "sum")
#+ b1cov("Neighbour_intra_2m_m2", form= "sum")
#+ b1cov("Neighbour_inter_2m_m2", form= "sum")
+ b2factor("Pollinator_fg", form="sum"))
ergm4 <- formula(bi.net ~ sum
#+ b1cov("Max_height_m", form= "sum")
#+ b1cov("Flower_guide", form= "sum")
#+ b1cov("Flower_size", form= "sum")
#+ b1cov("Sum_flower_number", form= "sum")
#+ b1cov("Synchrony_marquis", form= "sum"))
#+ b1cov("Distance_to_stream", form= "sum")
#+ b1cov("Distance_to_tree", form= "sum")
#+ b1cov("Distance_to_edge", form= "sum")
+ b1cov("Neighbour_intra_1m_m2", form= "sum")
+ b1cov("Neighbour_inter_1m_m2", form= "sum")
+ b1cov("Neighbour_intra_2m_m2", form= "sum")
+ b1cov("Neighbour_inter_2m_m2", form= "sum")
+ b2factor("Pollinator_fg", form="sum"))
# Model tests
set.seed(42)
ergm.fit0 <- ergm(ergm0, response= "weight", reference= ~Poisson)  # Simplest model
ergm.fit1 <- ergm(ergm1, response= "weight", reference= ~Poisson)    # Full model
summary(ergm.fit0)
mcmc.diagnostics(ergm.fit0)
summary(ergm.fit1)
gof(ergm.fit1)
mcmc.diagnostics(ergm.fit1) # For ergm() specifically, recent changes in the estimation algorithm mean that these plots can no longer be used to ensure that the mean statistics from the model match the observed network statistics.
uni <- as.one.mode(as.matrix(pol.int), project="lower") # pol.int is the plant-pollinator interaction matrix, plants in rows and pollinators in columns
uni.g <- graph.adjacency(uni, mode = "undirected", weighted = TRUE, diag = FALSE) # igraph object
V(uni.g)$Plant_ID<-     attr$Plant_ID
V(uni.g)$Max_height_m<-     attr$Max_height_m
V(uni.g)$Flower_guide<-   attr$Flower_guide
V(uni.g)$Flower_size<-   attr$Flower_size
V(uni.g)$Sum_flower_number<-   attr$Sum_flower_number
V(uni.g)$Synchrony_marquis<-   attr$Synchrony_marquis
V(uni.g)$Distance_to_stream<-   attr$Distance_to_stream
V(uni.g)$Distance_to_tree<-   attr$Distance_to_tree
V(uni.g)$Distance_to_edge<-   attr$Distance_to_edge
V(uni.g)$Neighbour_intra_1m_m2<-   attr$Neighbour_intra_1m_m2
V(uni.g)$Neighbour_inter_1m_m2<-   attr$Neighbour_inter_1m_m2
V(uni.g)$Neighbour_intra_2m_m2<-   attr$Neighbour_intra_2m_m2
V(uni.g)$Neighbour_inter_2m_m2<-   attr$Neighbour_inter_2m_m2
V(uni.g)
uni.g
uni.AA <- get.adjacency(uni.g, attr = "weight") # First separate the igraph object into adjacency matrix and plant attributes
uni.AA
s.matrix(uni.AA)
as.matrix(uni.AA)
uni.v.attrs <- get.data.frame(uni.g, what="vertices")[1:60,]
uni.v.attrs
as.matrix(uni.net,attrname="weight") # We can view the weight attribute as a matrix
uni.net <- network::as.network(as.matrix(uni.AA),
directed=FALSE, ignore.eval=FALSE, names.eval='weight')   # network object for ergm
as.matrix(uni.net,attrname="weight") # We can view the weight attribute as a matrix
network::set.vertex.attribute(uni.net, "Plant_ID",
uni.v.attrs$Plant_ID)
network::set.vertex.attribute(uni.net, "Max_height_m",
uni.v.attrs$Max_height_m)
network::set.vertex.attribute(uni.net, "Flower_guide",
uni.v.attrs$Flower_guide)
network::set.vertex.attribute(uni.net, "Flower_size",
uni.v.attrs$Flower_size)
network::set.vertex.attribute(uni.net, "Sum_flower_number",
uni.v.attrs$Sum_flower_number)
network::set.vertex.attribute(uni.net, "Synchrony_marquis",
uni.v.attrs$Synchrony_marquis)
network::set.vertex.attribute(uni.net, "Distance_to_stream",
uni.v.attrs$Distance_to_stream)
network::set.vertex.attribute(uni.net, "Distance_to_tree",
uni.v.attrs$Distance_to_tree)
network::set.vertex.attribute(uni.net, "Distance_to_edge",
uni.v.attrs$Distance_to_edge)
network::set.vertex.attribute(uni.net, "Neighbour_intra_1m_m2",
uni.v.attrs$Neighbour_intra_1m_m2)
network::set.vertex.attribute(uni.net, "Neighbour_inter_1m_m2",
uni.v.attrs$Neighbour_inter_1m_m2)
network::set.vertex.attribute(uni.net, "Neighbour_intra_2m_m2",
uni.v.attrs$Neighbour_intra_2m_m2)
network::set.vertex.attribute(uni.net, "Neighbour_inter_2m_m2",
uni.v.attrs$Neighbour_inter_2m_m2)
uni.distance <- read.csv("Data/distance_matrix.csv", sep=",")
uni.distance <- as.matrix(uni.distance[,2:61])
set.network.attribute(uni.net, "distance", uni.distance) # spatial distance between plants as network attribute
set.edge.value(uni.net,'distance', uni.distance)
uni.net
uni.net %e% "distance"
uni.AA <- get.adjacency(uni.g, attr = "weight") # First separate the igraph object into adjacency matrix and plant attributes
uni.v.attrs <- get.data.frame(uni.g, what="vertices")[1:60,]
uni.net <- network::as.network(as.matrix(uni.AA),
directed=FALSE, ignore.eval=FALSE, names.eval='weight')   # network object for ergm
as.matrix(uni.net,attrname="weight") # We can view the weight attribute as a matrix
network::set.vertex.attribute(uni.net, "Plant_ID",
uni.v.attrs$Plant_ID)
network::set.vertex.attribute(uni.net, "Max_height_m",
uni.v.attrs$Max_height_m)
network::set.vertex.attribute(uni.net, "Flower_guide",
uni.v.attrs$Flower_guide)
network::set.vertex.attribute(uni.net, "Flower_size",
uni.v.attrs$Flower_size)
network::set.vertex.attribute(uni.net, "Sum_flower_number",
uni.v.attrs$Sum_flower_number)
network::set.vertex.attribute(uni.net, "Synchrony_marquis",
uni.v.attrs$Synchrony_marquis)
network::set.vertex.attribute(uni.net, "Distance_to_stream",
uni.v.attrs$Distance_to_stream)
network::set.vertex.attribute(uni.net, "Distance_to_tree",
uni.v.attrs$Distance_to_tree)
network::set.vertex.attribute(uni.net, "Distance_to_edge",
uni.v.attrs$Distance_to_edge)
network::set.vertex.attribute(uni.net, "Neighbour_intra_1m_m2",
uni.v.attrs$Neighbour_intra_1m_m2)
network::set.vertex.attribute(uni.net, "Neighbour_inter_1m_m2",
uni.v.attrs$Neighbour_inter_1m_m2)
network::set.vertex.attribute(uni.net, "Neighbour_intra_2m_m2",
uni.v.attrs$Neighbour_intra_2m_m2)
network::set.vertex.attribute(uni.net, "Neighbour_inter_2m_m2",
uni.v.attrs$Neighbour_inter_2m_m2)
uni.distance <- read.csv("Data/distance_matrix.csv", sep=",")
uni.distance <- as.matrix(uni.distance[,2:61])
#set.network.attribute(uni.net, "distance", uni.distance) # spatial distance between plants as network attribute
set.edge.value(uni.net,'distance', uni.distance)
uni.net %e% "distance"
uni.ergm0 <- formula(uni.net ~ sum)
# test main effects of plant traits in sharing pollinators
uni.ergm1 <- formula(uni.net ~ sum
+ nodecov("Max_height_m", form= "sum")
+ nodecov("Flower_guide", form= "sum")
+ nodecov("Flower_size", form= "sum")
+ nodecov("Sum_flower_number", form= "sum")
+ nodecov("Synchrony_marquis", form= "sum")
+ nodecov("Distance_to_stream", form= "sum")
+ nodecov("Distance_to_tree", form= "sum")
+ nodecov("Distance_to_edge", form= "sum")
+ nodecov("Neighbour_intra_1m_m2", form= "sum")
+ nodecov("Neighbour_inter_1m_m2", form= "sum")
+ nodecov("Neighbour_intra_2m_m2", form= "sum")
+ nodecov("Neighbour_inter_2m_m2", form= "sum")
+ edgecov("distance", form="sum"))
# test homophily
uni.ergm2 <- formula(uni.net ~ sum
+ absdiff("Max_height_m", form= "sum")
+ absdiff("Flower_guide", form= "sum")
+ absdiff("Flower_size", form= "sum")
+ absdiff("Sum_flower_number", form= "sum")
+ absdiff("Synchrony_marquis", form= "sum")
+ absdiff("Distance_to_stream", form= "sum")
+ absdiff("Distance_to_tree", form= "sum")
+ absdiff("Distance_to_edge", form= "sum")
+ absdiff("Neighbour_intra_1m_m2", form= "sum")
+ absdiff("Neighbour_inter_1m_m2", form= "sum")
+ absdiff("Neighbour_intra_2m_m2", form= "sum")
+ absdiff("Neighbour_inter_2m_m2", form= "sum")
+ edgecov("distance", form="sum"))
set.seed(42)
uni.ergm.fit0 <- ergm(uni.ergm0, response ="weight", reference= ~Poisson)
summary(uni.ergm.fit0)
mcmc.diagnostics(uni.ergm.fit0)
summary(uni.ergm.fit0)
uni.ergm.fit1 <- ergm(uni.ergm1, response ="weight", reference= ~Poisson)
set.network.attribute(uni.net, "distance", uni.distance) # spatial distance between plants as network attribute
get.network.attribute(uni.net, "distance")
uni.ergm.fit1 <- ergm(uni.ergm1, response ="weight", reference= ~Poisson)
summary(uni.ergm.fit1)
mcmc.diagnostics(uni.ergm.fit1)
uni.ergm.fit2 <- ergm(uni.ergm2, response ="weight", reference= ~Poisson)
summary(uni.ergm.fit2)
mcmc.diagnostics(uni.ergm.fit1)
library(plyr)
library(sand)
library(robustbase)
library(ergm) # Will load package 'network' as well.
library(igraph)
library(ggplot2)
library(dplyr)
library(maditr)
library(textshape)
library(VIF)
library(bipartite)
library(sjstats)
library(Hmisc)
library(network)
library(nlme)
library(ergm.count)
knitr::opts_chunk$set(echo = TRUE)
# read interaction data
int.data <- read.table("Data/rocina_halimium_09072019.csv", sep=";", header=T)
head(int.data)
names(int.data)
# read interaction data
int.data <- read.table("Data/rocina_halimium_09072019.csv", sep=";", header=T)
str(int.data)
int.data$N_visits <- as.numeric(int.data$N_visits)
library(plyr)
library(sand)
library(robustbase)
library(ergm) # Will load package 'network' as well.
library(igraph)
library(ggplot2)
library(dplyr)
library(maditr)
library(textshape)
library(VIF)
library(bipartite)
library(sjstats)
library(Hmisc)
library(network)
library(nlme)
library(ergm.count)
int.data$N_visits <- as.numeric(int.data$N_visits)
str(int.data)
